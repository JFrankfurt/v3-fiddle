/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { TickLens } from "../TickLens";

export class TickLens__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickLens> {
    return super.deploy(overrides || {}) as Promise<TickLens>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickLens {
    return super.attach(address) as TickLens;
  }
  connect(signer: Signer): TickLens__factory {
    return super.connect(signer) as TickLens__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickLens {
    return new Contract(address, _abi, signerOrProvider) as TickLens;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
    ],
    name: "getPopulatedTicks",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "int128",
            name: "liquidityNet",
            type: "int128",
          },
          {
            internalType: "uint128",
            name: "liquidityGross",
            type: "uint128",
          },
        ],
        internalType: "struct ITickLens.PopulatedTick[]",
        name: "populatedTicks",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    name: "getStaticData",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506108b8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635cea629b1461003b578063d82863e114610066575b600080fd5b61004e610049366004610609565b610086565b60405161005d93929190610834565b60405180910390f35b61007961007436600461062c565b6101b9565b60405161005d91906107a7565b60008060008373ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156100d157600080fd5b505afa1580156100e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010991906106f5565b5050604080517f1a68650200000000000000000000000000000000000000000000000000000000815290519598509396505073ffffffffffffffffffffffffffffffffffffffff881693631a68650293600480820194506020935090829003018186803b15801561017957600080fd5b505afa15801561018d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b19190610692565b929491935050565b60608160020b8360020b126101cd57600080fd5b60008473ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561021557600080fd5b505afa158015610229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024d9190610676565b9050600060088260020b8660020b8161026257fe5b0560020b901d9050600060088360020b8660020b8161027d57fe5b0560020b901d9050600182810b82820b030160008167ffffffffffffffff811180156102a857600080fd5b506040519080825280602002602001820160405280156102d2578160200160208202803683370190505b509050600184900b5b8360010b81136103ab576040517f5339c29600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b1690635339c29690610337908490600401610818565b60206040518083038186803b15801561034f57600080fd5b505afa158015610363573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610387919061078f565b828660010b83038151811061039857fe5b60209081029190910101526001016102db565b506000805b838110156104015760008382815181106103c657fe5b6020026020010151905060005b6101008110156103f7576001811b8216156103ef576001909301925b6001016103d3565b50506001016103b0565b508067ffffffffffffffff8111801561041957600080fd5b5060405190808252806020026020018201604052801561045357816020015b6104406105b2565b8152602001906001900390816104385790505b509650600185900b5b8460010b81136105a4576000838760010b83038151811061047957fe5b6020026020010151905060005b61010081101561059a576001811b8216156105925760008960020b82600886901b010290506000808f73ffffffffffffffffffffffffffffffffffffffff1663f30dba93846040518263ffffffff1660e01b81526004016104e79190610826565b60806040518083038186803b1580156104ff57600080fd5b505afa158015610513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053791906106ac565b50509150915060405180606001604052808460020b815260200182600f0b8152602001836fffffffffffffffffffffffffffffffff168152508d88600190039850888151811061058357fe5b60200260200101819052505050505b600101610486565b505060010161045c565b505050505050509392505050565b604080516060810182526000808252602082018190529181019190915290565b80516fffffffffffffffffffffffffffffffff811681146105f257600080fd5b919050565b805161ffff811681146105f257600080fd5b60006020828403121561061a578081fd5b813561062581610877565b9392505050565b600080600060608486031215610640578182fd5b833561064b81610877565b9250602084013561065b8161089c565b9150604084013561066b8161089c565b809150509250925092565b600060208284031215610687578081fd5b81516106258161089c565b6000602082840312156106a3578081fd5b610625826105d2565b600080600080608085870312156106c1578081fd5b6106ca856105d2565b9350602085015180600f0b81146106df578182fd5b6040860151606090960151949790965092505050565b600080600080600080600060e0888a03121561070f578283fd5b875161071a81610877565b602089015190975061072b8161089c565b9550610739604089016105f7565b9450610747606089016105f7565b9350610755608089016105f7565b925060a088015160ff8116811461076a578283fd5b60c0890151909250801515811461077f578182fd5b8091505092959891949750929550565b6000602082840312156107a0578081fd5b5051919050565b602080825282518282018190526000919060409081850190868401855b8281101561080b578151805160020b855286810151600f0b878601528501516fffffffffffffffffffffffffffffffff1685850152606090930192908501906001016107c4565b5091979650505050505050565b60019190910b815260200190565b60029190910b815260200190565b73ffffffffffffffffffffffffffffffffffffffff93909316835260029190910b60208301526fffffffffffffffffffffffffffffffff16604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff8116811461089957600080fd5b50565b8060020b811461089957600080fdfea164736f6c6343000706000a";
